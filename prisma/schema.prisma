generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUB_ADMIN
}

model Customer {
  id                 String             @id @default(uuid())
  fullName           String?
  displayName        String?
  email              String?            @unique
  isEmailVerified    Boolean?           @default(false)
  createdAt          DateTime           @default(now())
  isActive           Boolean            @default(true)


  defaultAddressID String?  @unique
  defaultAddress   Address? @relation("DefaultAddress", fields: [defaultAddressID], references: [id])

  addresses Address[] @relation("CustomerAddresses")
  paymentTransactions PaymentTransaction[] @relation("CustomerPaymentTransactions")
  orders              Order[]

  @@map("customers")
}

model Otp {
  id          String   @id @default(uuid())
  email       String
  otp         String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([email], name: "email_idx")
}

model Address {
  id          String   @id @default(uuid())
  customerID  String?
  firstName   String?
  lastName    String?
  company     String?
  address1    String?
  address2    String?
  city        String
  state       String
  zipCode     String?
  country     String   @default("India")
  phone       String?
  
  // Legacy fields for backward compatibility
  houseNo     String?
  streetName  String?
  societyName String?
  area        String?
  pincode     Int?
  district    String?
  
  createdAt   DateTime @default(now())

  customer   Customer?  @relation("CustomerAddresses", fields: [customerID], references: [id])
  defaultFor Customer? @relation("DefaultAddress")
  
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  imagesUrl   String[] // Admin can add multiple images
  createdAt   DateTime @default(now())

  @@map("admins")
}

// Banner Model
model Banner {
  id          String    @id @default(uuid())
  title       String
  description String?
  image       String    // ImageKit URL for banner image
  imageId     String    // ImageKit file ID
  imageName   String    // Original filename
  link        String?   // Optional link URL
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String

  @@map("banners")
}

// Product Model
model Products {
  id           String   @id @default(uuid())
  name         String
  handle       String   @unique // SKU/handle for the product
  description  String
  sellingPrice Decimal
  comparePrice Decimal? // Original price before discount (optional)
  imagesUrl    String[] // Admin can add multiple product image URLs
  category     String   // Renamed from 'type'
  subcategory  String?  // New field for subcategory
  tags         String[]
  weight       Int?
  stock        Int      @default(10) // Stock quantity
  featured     Boolean  @default(false) // Featured product flag
  status       String   @default("active") // active, draft, archived
  sku          String?  // Stock keeping unit
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedOn    DateTime @default(now())
  createdBy    String
  
  orderItems OrderItem[]

  @@map("products")
}


// Payment Transaction model to record the users payment 
model PaymentTransaction {
  id         String   @id @default(uuid())
  paymentId  String   @unique
  customerId String
  amount     Int
  status     String
  createdAt  DateTime @default(now())
  
  customer   Customer @relation(fields: [customerId], references: [id], name: "CustomerPaymentTransactions")
  
  @@map("payment_transactions")
}

model Order {
  id                 String     @id @default(uuid())
  customerId         String
  total              Decimal
  subtotal           Decimal
  tax                Decimal
  shipping           Decimal    // Renamed from shippingCost for consistency
  status             String     @default("pending")
  shippingAddressId  String
  billingAddressId   String
  paymentMethod      String
  paymentStatus      String     @default("pending")
  trackingNumber     String?
  razorpayOrderId    String?    // Store Razorpay order ID
  razorpayPaymentId  String?    // Store Razorpay payment ID
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  customer           Customer   @relation(fields: [customerId], references: [id])
  shippingAddress    Address    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress     Address    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items              OrderItem[] // Renamed from orderItems for consistency

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Decimal
  size       String?
  color      String?

  order      Order    @relation(fields: [orderId], references: [id])
  product    Products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Category Model
model Category {
  id            String       @id @default(uuid())
  name          String       @unique
  slug          String       @unique
  description   String?
  image         String?
  subcategories Subcategory[]
  featured      Boolean      @default(false)
  order         Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("categories")
}

// Subcategory Model
model Subcategory {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subcategories")
} 